/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package srms;

//import com.sun.jdi.connect.spi.Connection;
import java.sql.*;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.PreparedStatement;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import srms.login_frame.Signup_frame;

/**
 *
 * @author Ayuscal
 */
public final class fee_structure extends javax.swing.JFrame {
            
            private String selectedName;

    public String getSelectedName() {
        System.out.println("got name: "+selectedName);
        return selectedName;
    }

    public void setSelectedName(String selectedName) {
        this.selectedName = selectedName;
    }
            
            Connection con = null;
            PreparedStatement ps,ps1;
            ResultSet rs = null, rs1 = null;
    /**
     * Creates new form fee_structure
     * @throws java.lang.ClassNotFoundException
     */
            

    /**
     *
     * @throws java.lang.ClassNotFoundException
     * @throws java.sql.SQLException
     */    
            
    public fee_structure() throws ClassNotFoundException, SQLException {
        initComponents();
        lable1.setVisible(false);
        lable2.setVisible(false);
        Connect();
        loadStudentData();

       
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        paid = new javax.swing.JCheckBox();
        due = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        lable1 = new javax.swing.JLabel();
        lable2 = new javax.swing.JLabel();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "WELCOME", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Serif", 1, 36), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "FEE STATUS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Serif", 1, 36), new java.awt.Color(0, 102, 102))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Roll_No", "Name", "Sem./Year", "Fee Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel6.setText("Check If Fee Paid or Due");

        paid.setText("PAID");
        paid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidActionPerformed(evt);
            }
        });

        due.setText("DUE");
        due.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dueActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 102, 102));
        jButton1.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Generate Admit Card");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lable1.setFont(new java.awt.Font("Serif", 2, 14)); // NOI18N
        lable1.setForeground(new java.awt.Color(0, 102, 102));
        lable1.setText("If Fee is Paid then only,");
        lable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lable1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lable1FocusLost(evt);
            }
        });

        lable2.setFont(new java.awt.Font("Serif", 2, 14)); // NOI18N
        lable2.setForeground(new java.awt.Color(0, 102, 102));
        lable2.setText("Those can have Admit Card");
        lable2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lable2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lable2FocusLost(evt);
            }
        });

        back.setBackground(new java.awt.Color(0, 102, 102));
        back.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(paid, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(due, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lable1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(lable2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addGap(13, 13, 13))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(back)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel6)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paid)
                            .addComponent(due))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lable1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lable2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, 0))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 28, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 9, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void paidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidActionPerformed
          if (paid.isSelected()) {
        due.setSelected(false);
              try {
                  updateFeeStatus("Paid");
                  paid.setSelected(false);
              } catch (ClassNotFoundException | SQLException ex) {
                  Logger.getLogger(fee_structure.class.getName()).log(Level.SEVERE, null, ex);
              loadTableData();
              }
    } else {
        paid.setSelected(true); // Prevent unchecking
    }
    }//GEN-LAST:event_paidActionPerformed

    private void dueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dueActionPerformed
 if (due.isSelected()) {
        paid.setSelected(false);
     try {
         updateFeeStatus("Due");
         due.setSelected(false);
     } catch (ClassNotFoundException | SQLException ex) {
         Logger.getLogger(fee_structure.class.getName()).log(Level.SEVERE, null, ex);
         loadTableData();
     }
    } else {
        due.setSelected(true); // Prevent unchecking
    }
    }//GEN-LAST:event_dueActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Menu_frame().setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       // lable1.setVisible(false);
        //lable2.setVisible(false);
         //loadTableData();
         
    int selectedRow = jTable1.getSelectedRow();
    //String selectedName = jTable1.getValueAt(selectedRow, 1).toString();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row.");
        return;
    }
    
    int rollNo = (int) jTable1.getValueAt(selectedRow, 0);
  
    
    //setNaam(selectedName); 
    
    System.out.println("Selected Roll No: " + rollNo);
  
                try {
                    ps = con.prepareStatement("SELECT fee_status, name FROM fee_structure WHERE roll_no = ?");
                    ps.setInt(1, rollNo);
                    rs = ps.executeQuery();              
                    if (rs.next()){
                        String fee_stat = rs.getString("fee_status");
                       String sname = rs.getString("name");
                        System.out.println("Selected name is: " + selectedName);
                        selectedName = sname.trim();
                        setSelectedName(selectedName);
                       // lable1.setVisible(false);
                        //lable2.setVisible(false);
                        
                        
                        if ("Paid".equals(fee_stat)){
                        JOptionPane.showMessageDialog(this,"STUDENT " +sname+" can recive the Admit Card.");
                        System.out.println("STUDENT " +sname+" can recive the Admit Card.");
                        
                            ps = con.prepareStatement("SELECT name, reg_no, faculty, prg, imag from students WHERE roll_no = ?");
                            ps.setInt(1, rollNo); 
                            rs = ps.executeQuery();
                         
                         DefaultTableModel dtm =(DefaultTableModel) jTable1.getModel();
                         dtm.setRowCount(0);
                        
                            while (rs.next()) { 
                            String stname = rs.getString("name");
                            System.out.println("Setname: " + stname);
                            String reg = rs.getString("reg_no");
                            String fac = rs.getString("faculty");
                            String pro = rs.getString("prg");
                            String imagePath = rs.getString("imag");

            // Check if the roll_no already exists in fee_structure
            String checkQuery = "SELECT name FROM admit_card WHERE name = ?";
            ps = con.prepareStatement(checkQuery);
            ps.setString(1, sname);
            rs = ps.executeQuery();
           
            if ( sname == null ? checkQuery == null : sname.equals(checkQuery)){
                     RegistrationFormDisplay rf =   new RegistrationFormDisplay(selectedName);
                rf.setVisible(true);
                      //  new RegistrationFormDisplay().setVisible(true);
                      this.dispose();
            }
            else{
                if (!rs.next()) {
                // Insert the student data if it doesn't exist
                String insertQuery = "INSERT INTO admit_card(name, registration_no, roll_no, faculty, program, imag) VALUES (?, ?, ?, ?, ?, ?)";
                int roll_no = 33990;
                ps = con.prepareStatement(insertQuery);
                ps.setString(1, stname);
                ps.setString(2, reg);
                ps.setInt(3, roll_no);
                ps.setString(4, fac); 
                ps.setString(5, pro);
                ps.setString(6, imagePath);
               
               // ps.setString(5, checkQuery);
                ps.executeUpdate();
            }}
        }
                            
                RegistrationFormDisplay rf =   new RegistrationFormDisplay(selectedName);
                rf.setVisible(true);
                      //  new RegistrationFormDisplay().setVisible(true);
                      this.dispose();
                        }
                        
                    }
                    else{
                        //JOptionPane.showMessageDialog(this,"Invalid Username or Password.");
                        System.out.println("Failed");
                        loadTableData();
                        lable1.setVisible(true);
                        lable2.setVisible(true);
                        
                        
                    }} catch (SQLException | ClassNotFoundException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {
                    Logger.getLogger(fee_structure.class.getName()).log(Level.SEVERE, null, ex);
                }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
            
          
    
    
   /* public void setNaam(String name)
            {
                this.selectedName = name;
                System.out.println("stname before accessing: " + this.selectedName);
            }
          
    public String getNaam()
            {
                //this.sname = name;
                System.out.println("Passing sname: " + this.selectedName);
                return this.selectedName;
            }*/
    
    
    
            
    private void lable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lable1FocusGained
        // TODO add your handling code here:
         if(lable1.getText().equals("If Fee is Paid then only,")){
            lable1.setText(null);
            lable1.requestFocus();
           //lable1.setForeground(Color.);
           
        }
    }//GEN-LAST:event_lable1FocusGained

    private void lable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lable1FocusLost
     
          if (lable1.getText().length() == 0){
              lable1.setText("If Fee is Paid then only,");
           // lable1.setForeground(Color.gray);
           
        }
        
    }//GEN-LAST:event_lable1FocusLost

    private void lable2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lable2FocusGained
    
         if(lable2.getText().equals("Those can have Admit Card")){
            lable2.setText(null);
            lable2.requestFocus();
           //lable1.setForeground(Color.);
           
        }
    }//GEN-LAST:event_lable2FocusGained

    private void lable2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lable2FocusLost
         
         if (lable2.getText().length() == 0){
             lable2.setText("Those can have Admit Card");
           // lable1.setForeground(Color.gray);
           
        }
    }//GEN-LAST:event_lable2FocusLost

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    {
        
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
           selectedName = jTable1.getValueAt(selectedRow, 1).toString();
      //     setNaam(selectedName); 
            System.out.println("Selected Name: " + selectedName);  // Optionally print it
        } else {
            System.out.println("No row selected.");
        }
    }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     */
  public final void Connect(){
        
try{ 
    // Class.forName("com.mysql.cj.jdbc.Driver");
    con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdbms","root","");
       
        System.out.println("Database Connected successfully.");
      //  System.out.println("SQL Query: " + ps.toString());

    }
    catch( SQLException ex)
    {
        Logger.getLogger(Signup_frame.class.getName()).log(Level.SEVERE, null, ex);
    }   
    }


private void loadStudentData() throws ClassNotFoundException, SQLException {

    try {
       /* int selectedRow = jTable1.getSelectedRow();
        selectedName = jTable1.getValueAt(selectedRow, 1).toString();
        setNaam(selectedName);*/
        // Query to get all student data
        String query = "SELECT roll_no, name, Sm_yr FROM students";
        ps = con.prepareStatement(query);
        rs = ps.executeQuery();

        // Loop through students data and insert into fee_structure only if not already present
        while (rs.next()) {
            int rollNo = rs.getInt("roll_no");
            String name = rs.getString("name");
            //setNaam(name);
            //System.out.println("Selected Name: " + name);
            String semOrYear = rs.getString("Sm_yr");

            // Check if the roll_no already exists in fee_structure
            String checkQuery = "SELECT * FROM fee_structure WHERE roll_no = ?";
            ps1 = con.prepareStatement(checkQuery);
            ps1.setInt(1, rollNo);
            rs1 = ps1.executeQuery();

            if (!rs1.next()) {
                // Insert the student data if it doesn't exist
                String insertQuery = "INSERT INTO fee_structure (roll_no, name, Sem_or_year) VALUES (?, ?, ?)";
                PreparedStatement insertPs = con.prepareStatement(insertQuery);
                insertPs.setInt(1, rollNo);
                insertPs.setString(2, name);
                insertPs.setString(3, semOrYear);
                insertPs.executeUpdate();
            }
        }
        
        // Reload the table data
        loadTableData();
        
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading data: " + ex.getMessage());
    }
}

 
      
     
   private void updateFeeStatus(String status) throws ClassNotFoundException, SQLException {   
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    int selectedRow = jTable1.getSelectedRow();
    
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row.");
        return;
    }
    int rollNo = (int) jTable1.getValueAt(selectedRow, 0);
    System.out.println("Selected Roll No: " + rollNo);
    
    try {
        // Check if record already exists
        String checkQuery = "SELECT COUNT(*) FROM fee_structure WHERE roll_no = ?";
        ps = con.prepareStatement(checkQuery);
        ps.setInt(1, rollNo);
        rs = ps.executeQuery();
        
        if (rs.next() && rs.getInt(1) > 0) {
            // Record exists, update the status
            ps = con.prepareStatement("UPDATE fee_structure SET fee_status = ? WHERE roll_no = ?");
            ps.setString(1, status);
            ps.setInt(2, rollNo);
            int rowsUpdated = ps.executeUpdate();
            System.out.println("Rows updated: " + rowsUpdated);
        } else {
            // Record does not exist, insert a new record
            ps = con.prepareStatement("INSERT INTO fee_structure (roll_no, fee_status) VALUES (?, ?)");
            ps.setInt(1, rollNo);
            ps.setString(2, status);
            int rowsInserted = ps.executeUpdate();
            System.out.println("Rows inserted: " + rowsInserted);
        }

        // Clear the table and reload data
        model.setRowCount(0);  
        loadTableData();

        JOptionPane.showMessageDialog(null, "Fee status updated successfully.");
    } catch (SQLException ex) {
        Logger.getLogger(fee_structure.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
    }
}

    
    private void loadTableData() {
    try {
        // Establish a connection to the database
        //con = DriverManager.getConnection("jdbc:mysql://localhost/sdbms", "root", "");
        
        // SQL query to fetch all rows from the students table
        
        String query = "SELECT * FROM fee_structure";
        ps = con.prepareStatement(query);
        rs = ps.executeQuery();

        
        // Use a DefaultTableModel to set the data in JTable
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //model.setRowCount(0); // Clear existing rows
        model.setRowCount(0);  // Clear the table before reloading data
// Get metadata to dynamically set column names
        ResultSetMetaData rsmd = rs.getMetaData();
        int columnCount = rsmd.getColumnCount();
      
       // ResultSetMetaData rsmd = rs.getMetaData();
       // int columnCount = rsmd.getColumnCount();
        // Add rows from the ResultSet
        while (rs.next()) {
            Object[] row = new Object[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                row[i - 1] = rs.getObject(i);
            }
            model.addRow(row);
        }
         
            
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
    }
}
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fee_structure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fee_structure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fee_structure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fee_structure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new fee_structure().setVisible(true);
            }catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(fee_structure.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JCheckBox due;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lable1;
    private javax.swing.JLabel lable2;
    private javax.swing.JCheckBox paid;
    // End of variables declaration//GEN-END:variables

 

}
  
